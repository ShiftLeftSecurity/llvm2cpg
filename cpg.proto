syntax = "proto3";

package cpg;

option go_package = "github.com/ShiftLeftSecurity/proto/cpg";
option java_package = "io.shiftleft.proto.cpg";
option java_outer_classname = "Cpg";
option csharp_namespace = "io.shiftleft.proto.cpg";

enum NodePropertyName {
  UNKNOWN_NODE_PROPERTY = 0;
  // Type full name of which a TYPE_DECL is an alias of
ALIAS_TYPE_FULL_NAME = 158;
// The index of a call argument. This is used for the association between arguments and parameters. This property is different from ORDER for named arguments because of the required reordering to align arguments with parameters
ARGUMENT_INDEX = 40;
// The FULL_NAME of a the AST parent of an entity
AST_PARENT_FULL_NAME = 57;
// The type of the AST parent. Since this is only used in some parts of the graph the list does not include all possible parents by intention. Possible parents: METHOD, TYPE_DECL, NAMESPACE_BLOCK
AST_PARENT_TYPE = 56;
// Binary type signature
BINARY_SIGNATURE = 14;
// Identifier which uniquely describes a CLOSURE_BINDING. This property is used to match captured LOCAL nodes with the corresponding CLOSURE_BINDING nodes
CLOSURE_BINDING_ID = 50;
// The original name of the (potentially mangled) captured variable
CLOSURE_ORIGINAL_NAME = 159;
// The code snippet the node represents
CODE = 21;
// Column where the code starts
COLUMN_NUMBER = 11;
// Content of CONFIG_FILE node
CONTENT = 20;
// The group ID for a dependency
DEPENDENCY_GROUP_ID = 58;
// The dispatch type of a call, which is either static or dynamic. See dispatchTypes
DISPATCH_TYPE = 25;
// Evaluation strategy for function parameters and return values. One of the values in "evaluationStrategies"
EVALUATION_STRATEGY = 15;
// Full name of an element, e.g., the class name along, including its package
FULL_NAME = 6;
// The static types a TYPE_DECL inherits from. This property is matched against the FULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node for each TYPE_FULL_NAME
INHERITS_FROM_TYPE_FULL_NAME = 53;
// Indicates that the construct is external, that is, it is referenced but not defined in the code
IS_EXTERNAL = 7;
// The programming language this graph originates from
LANGUAGE = 19;
// Line where the code starts
LINE_NUMBER = 2;
// The FULL_NAME of a method. Used to link METHOD_INST and METHOD nodes. It is required to have exactly one METHOD node for each METHOD_FULL_NAME
METHOD_FULL_NAME = 54;
// The FULL_NAME of a method instance. Used to link CALL and METHOD_REF nodes to METHOD_INST nodes. There needs to be at least one METHOD_INST node for each METHOD_INST_FULL_NAME
METHOD_INST_FULL_NAME = 55;
// Indicates the modifier which is represented by a MODIFIER node. See modifierTypes
MODIFIER_TYPE = 26;
// Name of represented object, e.g., method name
NAME = 5;
// General ordering property. E.g. used to express the ordering of children in the AST
ORDER = 4;
// Type name emitted by parser, only present for logical type UNKNOWN
PARSER_TYPE_NAME = 3;
// Method signature
SIGNATURE = 22;
// The static type decl of a TYPE. This property is matched against the FULL_NAME of TYPE_DECL nodes. It is required to have exactly one TYPE_DECL for each different TYPE_DECL_FULL_NAME
TYPE_DECL_FULL_NAME = 52;
// The static type of an entity. E.g. expressions, local, parameters etc. This property is matched against the FULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node for each TYPE_FULL_NAME
TYPE_FULL_NAME = 51;
// Tag value
VALUE = 8;
// A version, given as a string
VERSION = 13;
}

enum EdgePropertyName {
  UNKNOWN_EDGE_PROPERT = 0;
  // Defines whether a PROPAGATE edge creates an alias
ALIAS = 1;
// Index of referenced CONTAINED node (0 based) - used together with cardinality=list
INDEX = 8;
// Local name of referenced CONTAINED node
LOCAL_NAME = 6;
}

enum EvaluationStrategies {
  UNKNOWN_EVALUATION_STRATEGY = 0;
  // A parameter or return of a function is passed by reference which means an address is used behind the scenes
BY_REFERENCE = 1;
// Only applicable to object parameter or return values. The pointer to the object is passed by value but the object itself is not copied and changes to it are thus propagated out of the method context
BY_SHARING = 2;
// A parameter or return of a function passed by value which means a flat copy is used
BY_VALUE = 3; 
}

enum DispatchTypes {
  UNKNOWN_DISPATCH_TYPE = 0;
  // For statically dispatched calls the call target is known before program execution
STATIC_DISPATCH = 1;
// For dynamically dispatched calls the target is determined during runtime
DYNAMIC_DISPATCH = 2;
}

enum LANGUAGES {
  UNKNOWN_LANGUAGE = 0;
  // 
JAVA = 1;
// 
JAVASCRIPT = 2;
// 
GOLANG = 3;
// 
CSHARP = 4;
// 
C = 5;
}

enum FRAMEWORKS {
  UNKNOWN_FRAMEWORK = 0;
  
}

message PropertyValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int32 int_value = 3;
    int64 long_value = 4;
    float float_value = 5;
    double double_value = 6;
    StringList string_list = 7;
    BoolList bool_list = 8;
    IntList int_list = 9;
    LongList long_list = 10;
    FloatList float_list = 11;
    DoubleList double_list = 12;
  }
}

message StringList {
  repeated string values = 1;
}

message BoolList {
  repeated bool values = 1;
}

message IntList {
  repeated int32 values = 1;
}

message LongList {
  repeated int64 values = 1;
}

message FloatList {
  repeated float values = 1;
}

message DoubleList {
  repeated double values = 1;
}

message CpgStruct {
  message Node {
    int64 key = 1;

    // Logical node type.
    enum NodeType {
      UNKNOWN_NODE_TYPE = 0;
      // A method annotation
ANNOTATION = 5;
// A literal value assigned to an ANNOTATION_PARAMETER
ANNOTATION_LITERAL = 49;
// Formal annotation parameter
ANNOTATION_PARAMETER = 7;
// Assignment of annotation argument to annotation parameter
ANNOTATION_PARAMETER_ASSIGN = 6;
// Initialization construct for arrays
ARRAY_INITIALIZER = 14;
// A structuring block in the AST
BLOCK = 31;
// A (method)-call
CALL = 15;
// Represents the binding of a LOCAL or METHOD_PARAMETER_IN into the closure of a method
CLOSURE_BINDING = 334;
// A comment
COMMENT = 511;
// Configuration file contents. Might be in use by a framework
CONFIG_FILE = 50;
// A control structure such as if, while, or for
CONTROL_STRUCTURE = 339;
// This node represents a dependency
DEPENDENCY = 35;
// Node representing a source file. Often also the AST root
FILE = 38;
// An arbitrary identifier/reference
IDENTIFIER = 27;
// An implicit call site hidden in a method indicated by METHOD_MAP policy entries
IMPLICIT_CALL = 307;
// Literal/Constant
LITERAL = 8;
// A local variable
LOCAL = 23;
// Member of a class struct or union
MEMBER = 9;
// Node to save meta data about the graph on its properties. Exactly one node of this type per graph
META_DATA = 39;
// A method/function/procedure
METHOD = 1;
// A method instance which always has to reference a method and may have type argument children if the referred to method is a template
METHOD_INST = 32;
// This node represents a formal parameter going towards the callee side
METHOD_PARAMETER_IN = 34;
// This node represents a formal parameter going towards the caller side
METHOD_PARAMETER_OUT = 33;
// Reference to a method instance
METHOD_REF = 333;
// A formal method return
METHOD_RETURN = 3;
// A modifier, e.g., static, public, private
MODIFIER = 300;
// This node represents a namespace as a whole whereas the NAMESPACE_BLOCK is used for each grouping occurrence of a namespace in code. Single representing NAMESPACE node is required for easier navigation in the query language
NAMESPACE = 40;
// A reference to a namespace
NAMESPACE_BLOCK = 41;
// A return instruction
RETURN = 30;
// A string tag
TAG = 24;
// A type which always has to reference a type declaration and may have type argument children if the referred to type declaration is a template
TYPE = 45;
// Argument for a TYPE_PARAMETER that belongs to a TYPE or METHOD_INST. It binds another TYPE to a TYPE_PARAMETER
TYPE_ARGUMENT = 48;
// A type declaration
TYPE_DECL = 46;
// Type parameter of TYPE_DECL or METHOD
TYPE_PARAMETER = 47;
// A language-specific node
UNKNOWN = 44;
// This node records what package prefix is most common to all analysed classes in the CPG
PACKAGE_PREFIX = 36;
    }
    NodeType type = 2;

    // Node properties.
    message Property {
      NodePropertyName name = 1;
      PropertyValue value = 2;
    }
  repeated Property property = 3;
  }
  repeated Node node = 1;

  message Edge {
    reserved 5;
    reserved "key";
    // Source node.
    int64 src = 1;
    // Destination node.
    int64 dst = 2;

    // Edge type.
    enum EdgeType {
      UNKNOWN_EDGE_TYPE = 0;
      // Alias relation between types
ALIAS_OF = 138;
// Syntax tree edge
AST = 3;
// Type argument binding to a type parameter
BINDS_TO = 22;
// Referencing to e.g. a LOCAL
CALL = 6;
// Represents the capturing of a variable into a closure
CAPTURE = 40;
// Connection between a captured LOCAL and the corresponding CLOSURE_BINDING
CAPTURED_BY = 41;
// Control flow edge
CFG = 19;
// Edge from control structure node to the expression that holds the condition
CONDITION = 56;
// Shortcut over multiple AST edges
CONTAINS = 28;
// Membership relation for a compound object
CONTAINS_NODE = 9;
// Link to evaluation type
EVAL_TYPE = 21;
// Inheritance relation between types
INHERITS_FROM = 23;
// Links together corresponding METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes
PARAMETER_LINK = 12;
// Encodes propagation of data from on node to another
PROPAGATE = 1;
// Reaching definition edge
REACHING_DEF = 137;
// The receiver of a method call which is either an object or a pointer
RECEIVER = 55;
// A reference to e.g. a LOCAL
REF = 10;
// Edges from nodes to tags
TAGGED_BY = 11;
// Indicates that a method is part of the vtable of a certain type declaration
VTABLE = 30;
    }
    EdgeType type = 3;

    // Edge properties.
    message Property {
      EdgePropertyName name = 1;
      PropertyValue value = 2;
    }
  repeated Property property = 4;
  }
  repeated Edge edge = 2;
}


message AdditionalNodeProperty {
  int64 node_id = 1;
  CpgStruct.Node.Property property = 2;
}

message AdditionalEdgeProperty {
  int64 edge_id = 1;
  CpgStruct.Edge.Property property = 2;
}

message CpgOverlay {
  repeated CpgStruct.Node node = 1;
  repeated CpgStruct.Edge edge = 2;
  repeated AdditionalNodeProperty node_property = 3;
  repeated AdditionalEdgeProperty edge_property = 4;
}
