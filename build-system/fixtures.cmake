if (APPLE AND CMAKE_OSX_SYSROOT)
  set (SYSROOT -isysroot ${CMAKE_OSX_SYSROOT})
else()
  set (SYSROOT)
endif()

define_property(GLOBAL
  PROPERTY TEST_FIXTURES
  BRIEF_DOCS "Holds a list of all generated fixtures"
  FULL_DOCS "See below")

define_property(GLOBAL
  PROPERTY TEST_FIXTURES_DEPENDENCIES
  BRIEF_DOCS "Holds a list of build targets for fixtures"
  FULL_DOCS "See above")

function(add_fixture fixture)
  set_property(GLOBAL APPEND PROPERTY TEST_FIXTURES ${fixture})
endfunction()

function(add_fixture_input fixture input)
  define_property(GLOBAL
    PROPERTY TEST_FIXTURE_INPUT-${fixture}
    BRIEF_DOCS "Holds an input for fixture"
    FULL_DOCS "See below")

  set_property(GLOBAL PROPERTY TEST_FIXTURE_INPUT-${fixture} ${input})
endfunction()

function(add_fixture_dependency dependency)
  set_property(GLOBAL APPEND PROPERTY TEST_FIXTURES_DEPENDENCIES ${dependency})
endfunction()

function(target_add_test_dependencies target)
  get_property(dependencies GLOBAL PROPERTY TEST_FIXTURES_DEPENDENCIES)
  add_dependencies(${target} ${dependencies})
endfunction()

# returns 'path' - ${CMAKE_SOURCE_DIR}
function(_fixture_prefix prefix path out)
  string(REPLACE "${prefix}/tests/fixtures/" "" replaced "${path}")
  file(TO_CMAKE_PATH "${replaced}" replaced)
  string(REPLACE "/" "_" replaced ${replaced})
  set(${out} ${replaced} PARENT_SCOPE)
endfunction()

function(compile_fixture)
  set (optionArguments )
  set (singleValueArguments COMPILER INPUT OUTPUT_EXTENSION)
  set (multipleValueArguments FLAGS)

  cmake_parse_arguments(arg
    "${optionArguments}"
    "${singleValueArguments}"
    "${multipleValueArguments}"
    ${ARGN}
    )

  get_filename_component(filename ${arg_INPUT} NAME_WE)
  get_filename_component(full_path ${arg_INPUT} DIRECTORY)
  _fixture_prefix(${CMAKE_SOURCE_DIR} ${full_path} path_prefix)

  set(fixture ${CMAKE_CURRENT_BINARY_DIR}/${filename}.${arg_OUTPUT_EXTENSION})

  add_custom_command(OUTPUT ${fixture}
    COMMAND ${arg_COMPILER} ${SYSROOT} ${arg_FLAGS} ${arg_INPUT} -o ${fixture}
    DEPENDS ${arg_INPUT}
    )
  set (dependency build-${path_prefix}-${filename}-${arg_OUTPUT_EXTENSION}-fixture)

  if (TARGET clang)
    set (clang_dependencies clang)
  endif()
  if (TARGET cxx)
    set (clang_dependencies ${clang_dependencies} cxx)
  endif()
  if (TARGET cxxabi)
    set (clang_dependencies ${clang_dependencies} cxxabi)
  endif()

  add_custom_target(${dependency} DEPENDS ${fixture} ${clang_dependencies} ${arg_INPUT})
  add_fixture(${fixture})
  add_fixture_input(${fixture} ${arg_INPUT})
  add_fixture_dependency(${dependency})
endfunction()

function(generate_fixture_factory fixture_factory)
  get_property(fixtures GLOBAL PROPERTY TEST_FIXTURES)

  set (HEADER
    "// !!! Autogenerated file (via ${CMAKE_CURRENT_LIST_DIR} !!!

namespace llvm2cpg {
namespace fixtures {
")

  set (FIXTURE_FACTORY ${CMAKE_CURRENT_BINARY_DIR}/FixturePaths.h)
  file(WRITE ${FIXTURE_FACTORY} ${HEADER})

  foreach(fixture ${fixtures})
    get_property(fixture_input GLOBAL PROPERTY TEST_FIXTURE_INPUT-${fixture})

    get_filename_component(filename ${fixture} NAME_WE)
    get_filename_component(extension ${fixture} EXT)
    string(REPLACE "." "" extension "${extension}")
    get_filename_component(full_path ${fixture} DIRECTORY)

    string(FIND ${full_path} ${CMAKE_BINARY_DIR} binary_dir_index)
    string(FIND ${full_path} ${CMAKE_SOURCE_DIR} source_dir_index)

    if (NOT binary_dir_index EQUAL -1)
      _fixture_prefix(${CMAKE_BINARY_DIR} ${full_path} path_prefix)
    elseif(NOT source_dir_index EQUAL -1)
      _fixture_prefix(${CMAKE_SOURCE_DIR} ${full_path} path_prefix)
    else()
      message(FATAL_ERROR "Unexpected fixture path: ${full_path}")
    endif()

    file(APPEND ${FIXTURE_FACTORY}
      "
static __attribute__((used)) const char *${path_prefix}_${filename}_${extension}_path() {
  return \"${fixture}\";
}

static __attribute__((used)) const char *${path_prefix}_${filename}_${extension}_input_path() {
  return \"${fixture_input}\";
}

")

  endforeach()

  file(APPEND ${FIXTURE_FACTORY} "
} // namespace fixtures
} // namespace llvm2cpg
")

  set (${fixture_factory} ${FIXTURE_FACTORY} PARENT_SCOPE)
endfunction()
