if (APPLE AND CMAKE_OSX_SYSROOT)
  set (SYSROOT -isysroot ${CMAKE_OSX_SYSROOT})
else()
  set (SYSROOT)
endif()

define_property(GLOBAL
  PROPERTY TEST_FIXTURES
  BRIEF_DOCS "Holds a list of all generated fixtures"
  FULL_DOCS "See below")

define_property(GLOBAL
  PROPERTY TEST_FIXTURES_DEPENDENCIES
  BRIEF_DOCS "Holds a list of build targets for fixtures"
  FULL_DOCS "See above")

#
# Private functions
#

function(_add_fixture fixture_name)
  set_property(GLOBAL APPEND PROPERTY TEST_FIXTURES ${fixture_name})
endfunction()

function(_add_fixture_input fixture input)
  define_property(GLOBAL
    PROPERTY TEST_FIXTURE_INPUT-${fixture}
    BRIEF_DOCS "Holds an input for fixture"
    FULL_DOCS "See below")

  set_property(GLOBAL PROPERTY TEST_FIXTURE_INPUT-${fixture} ${input})
endfunction()

function(_add_fixture_output fixture_name output)
  define_property(GLOBAL
    PROPERTY TEST_FIXTURE_INPUT-${fixture_name}
    BRIEF_DOCS "Holds an output for fixture"
    FULL_DOCS "See below")

  set_property(GLOBAL PROPERTY TEST_FIXTURE_OUTPUT-${fixture_name} ${output})
endfunction()

function(_add_fixture_dependency dependency)
  set_property(GLOBAL APPEND PROPERTY TEST_FIXTURES_DEPENDENCIES ${dependency})
endfunction()

#
# Public functions
#

function(get_fixture_input fixture_name input)
  get_property(value GLOBAL PROPERTY TEST_FIXTURE_INPUT-${fixture_name})
  set (${input} ${value} PARENT_SCOPE)
endfunction()

function(get_fixture_output fixture_name output)
  get_property(value GLOBAL PROPERTY TEST_FIXTURE_OUTPUT-${fixture_name})
  set (${output} ${value} PARENT_SCOPE)
endfunction()

function(target_add_test_dependencies target)
  get_property(dependencies GLOBAL PROPERTY TEST_FIXTURES_DEPENDENCIES)
  add_dependencies(${target} ${dependencies})
endfunction()

function(compile_fixture)
  set (optionArguments )
  set (singleValueArguments COMPILER INPUT OUTPUT_EXTENSION)
  set (multipleValueArguments FLAGS)

  cmake_parse_arguments(arg
    "${optionArguments}"
    "${singleValueArguments}"
    "${multipleValueArguments}"
    ${ARGN}
    )

  set(fixture_input ${arg_INPUT})

  get_filename_component(filename ${fixture_input} NAME_WE)
  get_filename_component(extension ${fixture_input} EXT)
  set (fixture_name "${filename}${extension}.${arg_OUTPUT_EXTENSION}")
  string(REPLACE "." "_" fixture_name ${fixture_name})

  set(fixture_output ${CMAKE_CURRENT_BINARY_DIR}/${filename}.${arg_OUTPUT_EXTENSION})

  add_custom_command(OUTPUT ${fixture_output}
    COMMAND ${arg_COMPILER} ${SYSROOT} ${arg_FLAGS} ${fixture_input} -o ${fixture_output}
    DEPENDS ${fixture_input}
    )
  set (dependency build-${fixture_name}-fixture)

  if (TARGET clang)
    set (clang_dependencies clang)
  endif()
  if (TARGET cxx)
    set (clang_dependencies ${clang_dependencies} cxx)
  endif()
  if (TARGET cxxabi)
    set (clang_dependencies ${clang_dependencies} cxxabi)
  endif()

  add_custom_target(${dependency} DEPENDS ${fixture_output} ${clang_dependencies} ${fixture_input})
  _add_fixture(${fixture_name})
  _add_fixture_input(${fixture_name} ${fixture_input})
  _add_fixture_output(${fixture_name} ${fixture_output})
  _add_fixture_dependency(${dependency})
endfunction()

function(generate_fixture_factory fixture_factory)
  get_property(fixture_names GLOBAL PROPERTY TEST_FIXTURES)

  set (HEADER
    "// !!! Autogenerated file !!!

namespace llvm2cpg {
namespace fixtures {
")

  set (FIXTURE_FACTORY ${CMAKE_CURRENT_BINARY_DIR}/FixturePaths.h)
  file(WRITE ${FIXTURE_FACTORY} ${HEADER})

  foreach(fixture_name ${fixture_names})
    get_fixture_input(${fixture_name} fixture_input)
    get_fixture_output(${fixture_name} fixture_output)

    file(APPEND ${FIXTURE_FACTORY}
      "
static __attribute__((used)) const char *${fixture_name}_output_path() {
  return \"${fixture_output}\";
}

static __attribute__((used)) const char *${fixture_name}_input_path() {
  return \"${fixture_input}\";
}

")

  endforeach()

  file(APPEND ${FIXTURE_FACTORY} "
} // namespace fixtures
} // namespace llvm2cpg
")

  set (${fixture_factory} ${FIXTURE_FACTORY} PARENT_SCOPE)
endfunction()
